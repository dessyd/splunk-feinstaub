name: Build and Release Splunk App

on:
  push:
    branches: [ main, master ]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Get repository name
      id: repo_name
      run: echo "name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT
    
    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y zip
    
    - name: Build Splunk app package (.spl file)
      run: |
        # Create a clean build directory
        mkdir -p build/${{ steps.repo_name.outputs.name }}
        
        # Copy app contents to build directory, excluding unnecessary files
        cp -r app/* build/${{ steps.repo_name.outputs.name }}/
        
        # Remove any local directories or temp files that shouldn't be in the package
        find build/${{ steps.repo_name.outputs.name }} -name "local" -type d -exec rm -rf {} +
        find build/${{ steps.repo_name.outputs.name }} -name "*.log" -type f -delete
        find build/${{ steps.repo_name.outputs.name }} -name "*.tmp" -type f -delete
        
        # Create the .spl file (which is just a tar file)
        cd build
        tar -czf ${{ steps.repo_name.outputs.name }}.spl ${{ steps.repo_name.outputs.name }}
        cd ..
        
        # Move the file to the root for consistent naming
        cp build/${{ steps.repo_name.outputs.name }}.spl ./${{ steps.repo_name.outputs.name }}.spl
        
        # Output the path for the next step
        echo "SPL_PATH=${{ steps.repo_name.outputs.name }}.spl" >> $GITHUB_ENV
    
    - name: Get commit hash and date for release tag
      id: commit_info
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "date=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
        echo "formatted_date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
    
    - name: Create versioned GitHub release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.commit_info.outputs.date }}-${{ steps.commit_info.outputs.sha_short }}
        name: Release ${{ steps.repo_name.outputs.name }} v${{ steps.commit_info.outputs.date }}
        body: |
          Automated release of ${{ steps.repo_name.outputs.name }} Splunk app
          
          Commit: ${{ github.sha }}
          Build Date: ${{ steps.commit_info.outputs.formatted_date }}
        files: ${{ env.SPL_PATH }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-latest-tag:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get repository name
        id: repo_name
        run: echo "name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT
      
      - name: Update or create 'latest' tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Delete the 'latest' tag if it exists
          git tag -d latest || true
          git push origin :refs/tags/latest || true
          
          # Create a new 'latest' tag pointing to the same commit
          git tag latest
          git push origin latest
      
      - name: Download latest release asset
        id: download_asset
        run: |
          # Wait a moment for the API to reflect the new release
          sleep 10
          
          # Get the URL of the .spl file from the latest release
          ASSET_URL=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | \
                      jq -r '.assets[] | select(.name | endswith(".spl")) | .browser_download_url')
          
          # Download the asset
          curl -L -o ${{ steps.repo_name.outputs.name }}.spl "$ASSET_URL"
          
          # Show some debug info
          echo "Downloaded from: $ASSET_URL"
      
      - name: Get current date
        id: date
        run: echo "formatted_date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
      
      - name: Create or update 'latest' release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest Release
          body: |
            This is always the latest release of ${{ steps.repo_name.outputs.name }}.
            
            Last updated: ${{ steps.date.outputs.formatted_date }}
            Based on commit: ${{ github.sha }}
          files: ${{ steps.repo_name.outputs.name }}.spl
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}